import importlib.util

from os import listdir
from os.path import isfile, join, splitext, dirname


class ModuleLoader:
    def __init__(self, module_name_stdin, modules_path, sample_path, saved_sample_name):
        self.module_name_stdin = module_name_stdin
        self.modules_path = modules_path
        self.sample_path = sample_path
        self.saved_sample_name = saved_sample_name

    def find_module(self):
        """
        Find module by name in "modules/" folder
        """
        dir_files = [f for f in listdir(self.modules_path) if isfile(join(self.modules_path, f))]

        for f in dir_files:
            available_module_name = splitext(f)[0]
            if available_module_name.lower() == self.module_name_stdin:
                return True
        return False

    def load_module(self):
        if self.find_module():
            print("[*] Loading module called " + "(" + self.module_name_stdin + ") from " + self.modules_path)
        else:
            raise Exception("[-] Module doesnt exist, write name correctly or create it")
    
    def execute_module(self):
        print("[*] Running module (" + self.module_name_stdin + ")")

        # Find file into directory
        for file_name in listdir(dirname(self.modules_path)):
            if file_name.lower() == self.module_name_stdin + ".py":
                module_full_path_real = join(dirname(self.modules_path), file_name)
                break
        else:
            raise FileNotFoundError(f"File not found {self.modules_path}")

        spec = importlib.util.spec_from_file_location(module_full_path_real.split("/")[1], module_full_path_real)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)

        for name in dir(module):
            attribute = getattr(module, name)
            if isinstance(attribute, type):
                if "run" in dir(attribute):
                    instance = attribute()
                    instance.run(self.sample_path, self.saved_sample_name)
                    break
